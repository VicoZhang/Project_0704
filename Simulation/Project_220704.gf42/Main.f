!=======================================================================
! Generated by  : PSCAD v4.6.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      INTEGER MRUNNUM       ! Gets Relative Run Number for Multiple Run Variables
!     SUBR    3PHVSRC       ! 3-Phase Source model

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1
      REAL     Frequency, Fault_R, Fault_Type
      REAL     Fault_Time, RT_1(7), RT_2, RT_3
      REAL     RT_4, RT_5(7), RT_6(7), RT_7, RT_8
      REAL     RT_9, Ia(7), Ib(7), Ic(7), I(3)
      REAL     U(3)

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 1
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 58
      NPGB      = NPGB + 21
      INODE     = NNODE + 2
      NNODE     = NNODE + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 8
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 105
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      Frequency = STOF(ISTOF + 1)
      IT_1     = STOI(ISTOI + 1)
      Fault_R  = STOF(ISTOF + 2)
      Fault_Type = STOF(ISTOF + 3)
      Fault_Time = STOF(ISTOF + 4)
      RT_2     = STOF(ISTOF + 12)
      RT_3     = STOF(ISTOF + 13)
      RT_4     = STOF(ISTOF + 14)
      RT_7     = STOF(ISTOF + 29)
      RT_8     = STOF(ISTOF + 30)
      RT_9     = STOF(ISTOF + 31)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         I(IT_0) = STOF(ISTOF + 52 + IT_0)
         U(IT_0) = STOF(ISTOF + 55 + IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         RT_1(IT_0) = STOF(ISTOF + 4 + IT_0)
         RT_5(IT_0) = STOF(ISTOF + 14 + IT_0)
         RT_6(IT_0) = STOF(ISTOF + 21 + IT_0)
         Ia(IT_0) = STOF(ISTOF + 31 + IT_0)
         Ib(IT_0) = STOF(ISTOF + 38 + IT_0)
         Ic(IT_0) = STOF(ISTOF + 45 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 40:[mrun] Multiple Run Component 
! ----------------------------------------
! Multiple Run Initialization
! ----------------------------------------
      CALL COMPONENT_ID(ICALL_NO,781393092)
      CALL MRUNVINI(792,1,704)


! List Variation of First Multiple Run Parameter:
! 3 Runs
      IF ( MRUNNUM(3,1)  .EQ. 1  ) Frequency = 49.7
      IF ( MRUNNUM(3,1)  .EQ. 2  ) Frequency = 50.0
      IF ( MRUNNUM(3,1)  .EQ. 3  ) Frequency = 50.3
!  Record Values into Output File"
      CALL MRUNVR(0,1,1,1,4,0,10,3,1,2,0.0,0.0,2.0,Frequency,"Frequency"&
     &)



! List Variation of Second Multiple Run Parameter:
! 6 Runs
      IF ( MRUNNUM(6,3)  .EQ. 1  ) Fault_R = 5.0
      IF ( MRUNNUM(6,3)  .EQ. 2  ) Fault_R = 10.0
      IF ( MRUNNUM(6,3)  .EQ. 3  ) Fault_R = 50.0
      IF ( MRUNNUM(6,3)  .EQ. 4  ) Fault_R = 100.0
      IF ( MRUNNUM(6,3)  .EQ. 5  ) Fault_R = 500.0
      IF ( MRUNNUM(6,3)  .EQ. 6  ) Fault_R = 1000.0
!  Record Values into Output File"
      CALL MRUNVR(0,1,1,2,4,0,10,6,3,2,0.0,0.0,2.0,Fault_R,"Fault_R")


! List Variation of Third Multiple Run Parameter:
! 4 Runs
      IF ( MRUNNUM(4,18)  .EQ. 1  ) Fault_Type = 1.0
      IF ( MRUNNUM(4,18)  .EQ. 2  ) Fault_Type = 4.0
      IF ( MRUNNUM(4,18)  .EQ. 3  ) Fault_Type = 7.0
      IF ( MRUNNUM(4,18)  .EQ. 4  ) Fault_Type = 8.0
!  Record Values into Output File"
      CALL MRUNVR(0,1,1,3,4,0,10,4,18,2,0.0,0.0,2.0,Fault_Type,"Fault_Ty&
     &pe")



! Random or Sequential Variation of Fourth Multiple Run Parameter:
! 11 Runs
      CALL MRUNVR(0,1,1,4,4,0,10,11,72,0,0.09,0.001,2.0,Fault_Time,"Faul&
     &t_Time")






! 100:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_1 = 0
      IF ( TIME .GE. Fault_Time ) IT_1 = 1
      IF ( TIME .GE. (Fault_Time+0.04) ) IT_1 = 0

! 110:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(1), (IBRCH(1)+85), (IBRCH(1)+86), (IBRCH(1)+8&
     &7), (IBRCH(1)+88), (IBRCH(1)+89), (IBRCH(1)+90),0,IT_1,NINT(Fault_&
     &Type),Fault_R)
      LVD1_1 = (OPENBR( (IBRCH(1)+85),SS(1)).AND.OPENBR( (IBRCH(1)+86),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+87),SS(1)).AND.OPENBR( (IBRCH(1)+88),S&
     &S(1)).AND.OPENBR( (IBRCH(1)+89),SS(1)).AND.OPENBR( (IBRCH(1)+90),S&
     &S(1)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,514531106,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 120:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: Ideal
!  Freq: externally controlled
      RVD1_1 = RTCF(NRTCF)
      RVD1_2 = Frequency * TWO_PI
      RVD1_3  = 0.0*PI_BY180
      RVD1_4 = RTCF(NRTCF+3)
      NRTCF  = NRTCF + 4
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (IBRCH(1)+3)&
     &, RVD1_4, .TRUE., RVD1_1 , RVD1_2, RVD1_3)
!

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 1),(IXFMR + 2),(IXFMR + 3), (IBRCH(1)+10),&
     & (IBRCH(1)+11), (IBRCH(1)+12), (IBRCH(1)+13), (IBRCH(1)+14), (IBRC&
     &H(1)+15),0,0,0,0,0,0,SS(1),0,1.0,0)

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(1), (IBRCH(1)+79), (IBRCH(1)+80), (IBRCH(1)+81&
     &), (IBRCH(1)+82), (IBRCH(1)+83), (IBRCH(1)+84))

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(1), (IBRCH(1)+94), (IBRCH(1)+95), (IBRCH(1)+96&
     &), (IBRCH(1)+97), (IBRCH(1)+98), (IBRCH(1)+99))

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(1), (IBRCH(1)+100), (IBRCH(1)+101), (IBRCH(1)+&
     &102), (IBRCH(1)+16), (IBRCH(1)+17), (IBRCH(1)+18))

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = Frequency
      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 2) = Fault_R
      STOF(ISTOF + 3) = Fault_Type
      STOF(ISTOF + 4) = Fault_Time
      STOF(ISTOF + 12) = RT_2
      STOF(ISTOF + 13) = RT_3
      STOF(ISTOF + 14) = RT_4
      STOF(ISTOF + 29) = RT_7
      STOF(ISTOF + 30) = RT_8
      STOF(ISTOF + 31) = RT_9

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 52 + IT_0) = I(IT_0)
         STOF(ISTOF + 55 + IT_0) = U(IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         STOF(ISTOF + 4 + IT_0) = RT_1(IT_0)
         STOF(ISTOF + 14 + IT_0) = RT_5(IT_0)
         STOF(ISTOF + 21 + IT_0) = RT_6(IT_0)
         STOF(ISTOF + 31 + IT_0) = Ia(IT_0)
         STOF(ISTOF + 38 + IT_0) = Ib(IT_0)
         STOF(ISTOF + 45 + IT_0) = Ic(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
!     SUBR    FTN180        ! FFT Calculation

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  Bus(3)

! Control Signals
      REAL     RT_1(7), RT_2, RT_3, RT_4, RT_5(7)
      REAL     RT_6(7), RT_7, RT_8, RT_9, Ia(7)
      REAL     Ib(7), Ic(7), I(3), U(3)

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 21
      INODE     = NNODE + 2
      NNODE     = NNODE + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 8
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 105
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      RT_2     = STOF(ISTOF + 12)
      RT_3     = STOF(ISTOF + 13)
      RT_4     = STOF(ISTOF + 14)
      RT_7     = STOF(ISTOF + 29)
      RT_8     = STOF(ISTOF + 30)
      RT_9     = STOF(ISTOF + 31)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         I(IT_0) = STOF(ISTOF + 52 + IT_0)
         U(IT_0) = STOF(ISTOF + 55 + IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         RT_1(IT_0) = STOF(ISTOF + 4 + IT_0)
         RT_5(IT_0) = STOF(ISTOF + 14 + IT_0)
         RT_6(IT_0) = STOF(ISTOF + 21 + IT_0)
         Ia(IT_0) = STOF(ISTOF + 31 + IT_0)
         Ib(IT_0) = STOF(ISTOF + 38 + IT_0)
         Ic(IT_0) = STOF(ISTOF + 45 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         Bus(IT_0) = NODE(INODE + 0 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I(1) = ( CBR((IBRCH(1)+91), SS(1)))
      I(2) = ( CBR((IBRCH(1)+92), SS(1)))
      I(3) = ( CBR((IBRCH(1)+93), SS(1)))
      U(1) = EMTDC_VVDC(SS(1), Bus(1), 0)
      U(2) = EMTDC_VVDC(SS(1), Bus(2), 0)
      U(3) = EMTDC_VVDC(SS(1), Bus(3), 0)

! 20:[datatap] Scalar/Array Tap 
      RT_2 = I(1)

! 30:[datatap] Scalar/Array Tap 
      RT_3 = I(2)

! 40:[mrun] Multiple Run Component 

! --------------------------------------------------------
! Multiple Run Recording Initialization
! --------------------------------------------------------
      CALL COMPONENT_ID(ICALL_NO,781393092)
      CALL MRUNOINI(4,0,10,"mrunout.out")

! Multiple Run Recording







! 50:[datatap] Scalar/Array Tap 
      RT_4 = I(3)

! 60:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL FTN180(1,0,7,1,50.0,50.0,RT_2,IVD1_1,Ia,RT_5,RT_7)
      CALL FTN180(1,0,7,1,50.0,50.0,RT_3,IVD1_1,Ib,RT_1,RT_9)
      CALL FTN180(1,0,7,1,50.0,50.0,RT_4,IVD1_1,Ic,RT_6,RT_8)
!

! 70:[pgb] Output Channel 'Ic'

      DO IVD1_1 = 1, 7
         PGB(IPGB+1+IVD1_1-1) = 1000.0 * Ic(IVD1_1)
      ENDDO

! 80:[pgb] Output Channel 'Ib'

      DO IVD1_1 = 1, 7
         PGB(IPGB+8+IVD1_1-1) = 1000.0 * Ib(IVD1_1)
      ENDDO

! 90:[pgb] Output Channel 'Ia'

      DO IVD1_1 = 1, 7
         PGB(IPGB+15+IVD1_1-1) = 1000.0 * Ia(IVD1_1)
      ENDDO

! 110:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 12) = RT_2
      STOF(ISTOF + 13) = RT_3
      STOF(ISTOF + 14) = RT_4
      STOF(ISTOF + 29) = RT_7
      STOF(ISTOF + 30) = RT_8
      STOF(ISTOF + 31) = RT_9

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 52 + IT_0) = I(IT_0)
         STOF(ISTOF + 55 + IT_0) = U(IT_0)
      END DO

! Array (1:7) quantities...
      DO IT_0 = 1,7
         STOF(ISTOF + 4 + IT_0) = RT_1(IT_0)
         STOF(ISTOF + 14 + IT_0) = RT_5(IT_0)
         STOF(ISTOF + 21 + IT_0) = RT_6(IT_0)
         STOF(ISTOF + 31 + IT_0) = Ia(IT_0)
         STOF(ISTOF + 38 + IT_0) = Ib(IT_0)
         STOF(ISTOF + 45 + IT_0) = Ic(IT_0)
      END DO


!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 8
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 105
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 110:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 120:[source_3] Three Phase Voltage Source Model 2 'Source 1'
      RTCF(NRTCF)   = 110.0*SQRT_2*SQRT_1BY3
      RTCF(NRTCF+3) = 0.05
      NRTCF = NRTCF + 4

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 
      CALL COMPONENT_ID(ICALL_NO,1124597987)
      RVD1_1 = ONE_3RD*100.0
      RVD1_2 = 110.0*SQRT_1BY3
      RVD1_3 = 35.0
      CALL E_TF2W_CFG((IXFMR + 1),0,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,1.&
     &0)
      CALL E_TF2W_CFG((IXFMR + 2),0,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,1.&
     &0)
      CALL E_TF2W_CFG((IXFMR + 3),0,RVD1_1,50.0,0.1,0.0,RVD1_2,RVD1_3,1.&
     &0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(100.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+4),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+5),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+6),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+7),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+8),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+9),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH(1)+10), (IBRCH(1)+11), (IBRCH(1)+12), (IB&
     &RCH(1)+13), (IBRCH(1)+14), (IBRCH(1)+15),0,0,0,0,0,0,SS(1),RVD1_1,&
     &0.2,1.17,50.0,0.0,1.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,0.&
     &0,0.0)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,1343391774)
      CALL PI3_SECTION_CFG(1,1,0, 0.0,0.0,50.0,15000.0,1.781598e-05,0.00&
     &031388,273.5448,0.0002952201,0.001039898,414.1642,RVD1_1,RVD1_2,RV&
     &D1_3,RVD1_4,RVD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+19),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+20),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+21),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+22),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+23),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+24),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+25),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+26),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+27),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+28),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+29),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+30),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 4),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,292647968)
      CALL PI3_SECTION_CFG(1,1,0, 0.0,0.0,50.0,15000.0,1.781598e-05,0.00&
     &031388,273.5448,0.0002952201,0.001039898,414.1642,RVD1_1,RVD1_2,RV&
     &D1_3,RVD1_4,RVD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+31),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+32),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+33),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+34),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+35),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+36),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+37),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+38),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+39),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+40),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+41),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+42),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 5),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,50.0,1.0,1.0,2.0,2.0,0.0,0.0)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,1787710873)
      CALL PI3_SECTION_CFG(1,1,0, 0.0,0.0,50.0,10000.0,1.781598e-05,0.00&
     &031388,273.5448,0.0002952201,0.001039898,414.1642,RVD1_1,RVD1_2,RV&
     &D1_3,RVD1_4,RVD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+43),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+44),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+45),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+46),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+47),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+48),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+49),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+50),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+51),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+52),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+53),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+54),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 6),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,295469457)
      CALL PI3_SECTION_CFG(1,1,0, 0.0,0.0,50.0,15000.0,1.781598e-05,0.00&
     &031388,273.5448,0.0002952201,0.001039898,414.1642,RVD1_1,RVD1_2,RV&
     &D1_3,RVD1_4,RVD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+55),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+56),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+57),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+58),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+59),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+60),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+61),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+62),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+63),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+64),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+65),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+66),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 7),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,50.0,1.5,1.0,2.0,2.0,0.0,0.0)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,1199761183)
      CALL PI3_SECTION_CFG(1,1,0, 0.0,0.0,50.0,20000.0,1.781598e-05,0.00&
     &031388,273.5448,0.0002952201,0.001039898,414.1642,RVD1_1,RVD1_2,RV&
     &D1_3,RVD1_4,RVD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+67),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+68),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+69),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+70),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+71),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+72),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+73),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+74),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+75),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+76),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+77),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+78),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 8),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(132.790562,50.0,2.0,1.0,2.0,2.0,0.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  Bus(3)

! Control Signals

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 27
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 8
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 105
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         Bus(IT_0) = NODE(INODE + 0 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 20:[datatap] Scalar/Array Tap 

! 30:[datatap] Scalar/Array Tap 

! 50:[datatap] Scalar/Array Tap 

! 60:[fft] On-Line Frequency Scanner 

! 70:[pgb] Output Channel 'Ic'

! 80:[pgb] Output Channel 'Ib'

! 90:[pgb] Output Channel 'Ia'

      RETURN
      END

